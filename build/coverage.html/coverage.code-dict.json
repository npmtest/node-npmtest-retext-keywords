{"/home/travis/build/npmtest/node-npmtest-retext-keywords/test.js":"/* istanbul instrument in package npmtest_retext_keywords */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-retext-keywords/lib.npmtest_retext_keywords.js":"/* istanbul instrument in package npmtest_retext_keywords */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_retext_keywords = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_retext_keywords = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-retext-keywords/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-retext-keywords && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_retext_keywords */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_retext_keywords\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_retext_keywords.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_retext_keywords.rollup.js'] =\n            local.assetsDict['/assets.npmtest_retext_keywords.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_retext_keywords.__dirname + '/lib.npmtest_retext_keywords.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-retext-keywords/node_modules/retext-keywords/index.js":"'use strict';\n\nvar has = require('has');\nvar stemmer = require('stemmer');\nvar visit = require('unist-util-visit');\nvar nlcstToString = require('nlcst-to-string');\nvar pos = require('retext-pos');\n\nmodule.exports = keywords;\n\nfunction keywords(options) {\n  this.use(pos).use(gatherKeywords, options);\n}\n\nfunction gatherKeywords(options) {\n  var maximum = (options || {}).maximum || 5;\n\n  return transformer;\n\n  function transformer(tree, file) {\n    var important = getImportantWords(tree);\n\n    file.data.keywords = filterResults(cloneMatches(important), maximum);\n    file.data.keyphrases = getKeyphrases(important, maximum);\n  }\n}\n\n/* Get following or preceding important words or white space. */\nfunction findPhraseInDirection(node, index, parent, offset) {\n  var children = parent.children;\n  var nodes = [];\n  var stems = [];\n  var words = [];\n  var queue = [];\n  var child;\n\n  while (children[index += offset]) {\n    child = children[index];\n\n    if (child.type === 'WhiteSpaceNode') {\n      queue.push(child);\n    } else if (isImportant(child)) {\n      nodes = nodes.concat(queue, [child]);\n      words.push(child);\n      stems.push(stemNode(child));\n      queue = [];\n    } else {\n      break;\n    }\n  }\n\n  return {\n    stems: stems,\n    words: words,\n    nodes: nodes\n  };\n}\n\n/* Get the top important phrases in `self`. */\nfunction getKeyphrases(results, maximum) {\n  var stemmedPhrases = {};\n  var initialWords = [];\n  var stemmedPhrase;\n  var index;\n  var length;\n  var otherIndex;\n  var keyword;\n  var matches;\n  var phrase;\n  var stems;\n  var score;\n  var first;\n  var match;\n\n  /* Iterate over all grouped important words... */\n  for (keyword in results) {\n    matches = results[keyword].matches;\n    length = matches.length;\n    index = -1;\n\n    /* Iterate over every occurence of a certain keyword... */\n    while (++index < length) {\n      phrase = findPhrase(matches[index]);\n      stemmedPhrase = stemmedPhrases[phrase.value];\n      first = phrase.nodes[0];\n\n      match = {\n        nodes: phrase.nodes,\n        parent: matches[index].parent\n      };\n\n      /* If we've detected the same stemmed\n       * phrase somewhere. */\n      if (has(stemmedPhrases, phrase.value)) {\n        /* Add weight per phrase to the score of\n         * the phrase. */\n        stemmedPhrase.score += stemmedPhrase.weight;\n\n        /* If this is the first time we walk over\n         * the phrase (exact match but containing\n         * another important word), add it to the\n         * list of matching phrases. */\n        if (initialWords.indexOf(first) === -1) {\n          initialWords.push(first);\n          stemmedPhrase.matches.push(match);\n        }\n      } else {\n        otherIndex = -1;\n        score = -1;\n        stems = phrase.stems;\n\n        initialWords.push(first);\n\n        /* For every stem in phrase, add its\n         * score to score. */\n        while (stems[++otherIndex]) {\n          score += results[stems[otherIndex]].score;\n        }\n\n        stemmedPhrases[phrase.value] = {\n          score: score,\n          weight: score,\n          stems: stems,\n          value: phrase.value,\n          matches: [match]\n        };\n      }\n    }\n  }\n\n  for (stemmedPhrase in stemmedPhrases) {\n    phrase = stemmedPhrases[stemmedPhrase];\n\n    /* Modify its score to be the rounded result of\n     * multiplying it with the number of occurances,\n     * and dividing it by the ammount of words in the\n     * phrase. */\n    phrase.score = Math.round(\n      phrase.score * phrase.matches.length / phrase.stems.length\n    );\n  }\n\n  return filterResults(stemmedPhrases, maximum);\n}\n\n/* Get the top results from an occurance map. */\nfunction filterResults(results, maximum) {\n  var filteredResults = [];\n  var indices = [];\n  var matrix = {};\n  var column;\n  var key;\n  var score;\n  var interpolated;\n  var index;\n  var otherIndex;\n  var maxScore;\n\n  for (key in results) {\n    score = results[key].score;\n\n    if (!matrix[score]) {\n      matrix[score] = [];\n      indices.push(score);\n    }\n\n    matrix[score].push(results[key]);\n  }\n\n  indices.sort(reverse);\n\n  maxScore = indices[0];\n\n  index = -1;\n\n  while (indices[++index]) {\n    score = indices[index];\n    column = matrix[score];\n\n    interpolated = score / maxScore;\n    otherIndex = -1;\n\n    while (column[++otherIndex]) {\n      column[otherIndex].score = interpolated;\n    }\n\n    filteredResults = filteredResults.concat(column);\n\n    if (filteredResults.length >= maximum) {\n      break;\n    }\n  }\n\n  return filteredResults;\n}\n\n/* Merge a previous array, with a current value, and\n * a following array. */\nfunction merge(prev, current, next) {\n  return prev.concat().reverse().concat([current], next);\n}\n\n/* Find the phrase surrounding a node. */\nfunction findPhrase(match) {\n  var node = match.node;\n  var prev = findPhraseInDirection(node, match.index, match.parent, -1);\n  var next = findPhraseInDirection(node, match.index, match.parent, 1);\n  var stems = merge(prev.stems, stemNode(node), next.stems);\n\n  return {\n    stems: stems,\n    value: stems.join(' '),\n    nodes: merge(prev.nodes, node, next.nodes)\n  };\n}\n\n/* Get most important words in `node`. */\nfunction getImportantWords(node) {\n  var words = {};\n\n  visit(node, 'WordNode', visitor);\n\n  return words;\n\n  function visitor(word, index, parent) {\n    var match;\n    var stem;\n\n    if (isImportant(word)) {\n      stem = stemNode(word);\n      match = {\n        node: word,\n        index: index,\n        parent: parent\n      };\n\n      if (!has(words, stem)) {\n        words[stem] = {\n          matches: [match],\n          stem: stem,\n          score: 1\n        };\n      } else {\n        words[stem].matches.push(match);\n        words[stem].score++;\n      }\n    }\n  }\n}\n\n/* Clone the given map of words.\n * This is a two level-deep clone. */\nfunction cloneMatches(words) {\n  var result = {};\n  var key;\n  var match;\n\n  for (key in words) {\n    match = words[key];\n\n    result[key] = {\n      matches: match.matches,\n      stem: match.stem,\n      score: match.score\n    };\n  }\n\n  return result;\n}\n\n/* Check if `node` is important. */\nfunction isImportant(node) {\n  return (\n    node &&\n    node.data &&\n    node.data.partOfSpeech &&\n    (\n      node.data.partOfSpeech.indexOf('N') === 0 ||\n      (\n        node.data.partOfSpeech === 'JJ' &&\n        isUpperCase(nlcstToString(node).charAt(0))\n      )\n    )\n  );\n}\n\n/* Check if `value` is upper-case. */\nfunction isUpperCase(value) {\n  return value === String(value).toUpperCase();\n}\n\n/* Reverse sort: from 9 to 0. */\nfunction reverse(a, b) {\n  return b - a;\n}\n\n/* Get the stem of a node. */\nfunction stemNode(node) {\n  return stemmer(nlcstToString(node)).toLowerCase();\n}\n"}